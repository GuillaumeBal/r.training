summary(salmonTidy)
sum(salmonTidy$julian_day > 365)
sum(salmonTidy$julian_day > 365, na.rm = TRUE)
sum(is.na(salmonTidy$julian_day))
idx2 <- ( ! is.na(salmonTidy$julian_day)) & salmonTidy$julian_day <= 365
sum(idx2)
sum( ! idx2)
salmonTidy <- salmonTidy[idx2 , ]
summary(salmonTidy)
salmonTidy <- subset(salmonTidy,)
head(salmonTidy$wild)
c(TRUE, FALSE)[head(salmonTidy$wild)]
1 - head(salmonTidy$wild)
2 - head(salmonTidy$wild)
as.logical(2 - head(salmonTidy$wild))
salmonTidy$wild <- as.logical(2 - salmonTidy$wild)
table(salmonTidy$wild)
write.table(x = salmonTidy,
file = "salmonTidy.csv", sep = ",", dec = ".",
row.names = FALSE)
y = salmonRaw$weight)
plot(x = salmonRaw$length,
y = salmonRaw$weight)
locator()
locator()
locator()
?locator()
locator(n = 1)
locator(n = 1)
# plot weight vs length
plot(x = salmonRaw$length,
y = salmonRaw$weight,
col = salmonRaw$river)
summary(as.numeric(salmonRaw$river))
plot(x = salmonRaw$length,
y = salmonRaw$weight,
col = c("blue", "red", "green", "orange", "grey")[salmonRaw$river])
levels(salmonRaw$river)
legend('topleft',
levels(salmonRaw$river),
col =c("blue", "red", "green", "orange", "grey"))
legend('topleft',
levels(salmonRaw$river),
pch = rep(16, nlevels(salmonRaw$river)),
col =c("blue", "red", "green", "orange", "grey"))
?legend()
# plot weight vs length
plot(x = salmonRaw$length,
y = salmonRaw$weight,
col = c("blue", "red", "green", "orange", "grey")[salmonRaw$river])
levels(salmonRaw$river)
legend('topleft',
levels(salmonRaw$river),
pch = rep(16, nlevels(salmonRaw$river)),
col =c("blue", "red", "green", "orange", "grey"),
bty = 'n')
legend('topleft',
levels(salmonRaw$river),
pch = rep(16, nlevels(salmonRaw$river)),
col =c("blue", "red", "green", "orange", "grey"),
bty = 'n',
ncol = 1)
# plot weight vs length
plot(x = salmonRaw$length,
y = salmonRaw$weight,
col = c("blue", "red", "green", "orange", "grey")[salmonRaw$river])
levels(salmonRaw$river)
legend('topleft',
levels(salmonRaw$river),
pch = rep(16, nlevels(salmonRaw$river)),
col =c("blue", "red", "green", "orange", "grey"),
bty = 'n',
ncol = nlevels(salmonRaw$river))
legend('topleft',
levels(salmonRaw$river),
pch = rep(16, nlevels(salmonRaw$river)),
col =c("blue", "red", "green", "orange", "grey"),
bty = 'n',
ncol = nlevels(salmonRaw$river))
x11()
plot(x = salmonRaw$length,
y = salmonRaw$weight,
col = c("blue", "red", "green", "orange", "grey")[salmonRaw$river])
levels(salmonRaw$river)
legend('topleft',
levels(salmonRaw$river),
pch = rep(16, nlevels(salmonRaw$river)),
col =c("blue", "red", "green", "orange", "grey"),
bty = 'n',
ncol = nlevels(salmonRaw$river))
?plot()
c(1, NA, 2) == NA
c(1, NA, 2) == "NA"
c(1, NA, 'NA') == "NA"
par(mfrow = c(2, 3),
oma = c(6, .5, .5, .5),
mar = c(.5, .5, .5, 4))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
plot(rnorm(n = 10))
getwd()
rnorm(n = 10)
pdf(file = 'figure1.pdf',
width = 4, height = 3,
useDingbats = F)
plot(rnorm(n = 10))
dev.off()
pdf(file = 'figure1.pdf',
width = 4, height = 3,
useDingbats = F)
# sizes are specific to function, pixels, inches...
# useDingbats = F, argument specif to pdf,
# it avoid display issues
plot(rnorm(n = 10))
plot(rnorm(n = 10))
dev.off()
pdf(file = 'figure1.pdf',
width = 4, height = 3,
useDingbats = F)
# sizes are specific to function, pixels, inches...
# useDingbats = F, argument specif to pdf,
# it avoid display issues
plot(rnorm(n = 10))
plot(rnorm(n = 10))
dev.off()
salmon.data <- read.table('N:/0_r_training/2_data/salmonRaw.txt', header = TRUE)
dim(salmon.data)
?matplot
pairs(salmon.data)
pairs(salmon.data[1:200 , ])
pairs(salmon.data[1:200 , 1:5])
matplot(salmon.data[1:200 , 1:5])
matplot(salmon.data[1:200 , 1:5], type = 'line')
?matplot
matplot(salmon.data[1:200 , 1:5], type = 'l')
for(i in 1:10){
print(i)
}
mymat <- matrix(nrow = 20, ncol = 20) # create a 20 x 20 matrix
for(i in 1:dim(mymat)[1]){  # for each row
for(j in 1:dim(mymat)[2]){ # for each column
mymat[i, j] = i * j # assign values based on position: product of two indexes
}
}
print(mymat)
mymat <- matrix(nrow = 20, ncol = 20) # create a 20 x 20 matrix
for(i in 1:dim(mymat)[1]){  # for each row
for(j in 1:dim(mymat)[2]){ # for each column
if(i * j < 20){
mymat[i, j] = i * j # assign values based on position: product of two indexes
}else{
mymat[i, j] <- 'BIG'
#break
#next()
}
}
}
for(i in 1:dim(mymat)[1]){  # for each row
for(j in 1:dim(mymat)[2]){ # for each column
if(i * j < 20){
mymat[i, j] = i * j # assign values based on position: product of two indexes
}else{
mymat[i, j] <- 'BIG'
#break
#next()
}
}
}
print(mymat)
mymat <- matrix(nrow = 10, ncol = 10) # create a 20 x 20 matrix
for(i in 1:dim(mymat)[1]){  # for each row
for(j in 1:dim(mymat)[2]){ # for each column
if(i * j < 20){
mymat[i, j] = i * j # assign values based on position: product of two indexes
}else{
#mymat[i, j] <- 'BIG'
break()
#next()
}
}
}
print(mymat)
for(i in 1:dim(mymat)[1]){  # for each row
for(j in 1:dim(mymat)[2]){ # for each column
if(i * j < 20){
mymat[i, j] = i * j # assign values based on position: product of two indexes
}else{
#mymat[i, j] <- 'BIG'
#break()
next()
}
}
}
print(mymat)
mymat <- matrix(nrow = 10, ncol = 10) # create a 20 x 20 matrix
for(i in 1:dim(mymat)[1]){  # for each row
for(j in 1:dim(mymat)[2]){ # for each column
if(i * j < 20){
mymat[i, j] = i * j # assign values based on position: product of two indexes
}else{
#mymat[i, j] <- 'BIG'
#break()
next()
}
}
}
print(mymat)
mymat <- matrix(nrow = 10, ncol = 10) # create a 20 x 20 matrix
for(i in 1:dim(mymat)[1]){  # for each row
for(j in 1:dim(mymat)[2]){ # for each column
if(i * j < 5 | i * j > 7){
mymat[i, j] = i * j # assign values based on position: product of two indexes
}else{
#mymat[i, j] <- 'BIG'
break()
#next()
}
}
}
print(mymat)
years <- unique(salmon.data$year)
years
years <- unique(salmon.data$year, na.omit = T)
years
?unique()
years <- unique(salmon.data$year, na.rm = T)
years
years <- unique(salmon.data$year, na.pass = T)
years
years <- unique(salmon.data$year[!is.na(salmon.data$year)])
years
n.years <- length(years)
n.years
nlevels(as.factor(salmon$year))
nlevels(as.factor(salmon.data$year))
nlevels(salmon.data$river)
mean.vector <- function(vec){
# if vec is a vector, returns its mean
if(is.vector(vec)){
sum.vec <- sum(vec)
length.vec <- length(vec)
sum.vec / length.vec
}else{ # if vec is not a vector print error message
print('Vec is not a vector')
}
}
mean.vector <- function(vec){
# if vec is a vector, returns its mean
if(is.vector(vec)){
sum.vec <- sum(vec)
length.vec <- length(vec)
sum.vec / length.vec
}else{ # if vec is not a vector print error message
print('Vec is not a vector')
}
}
my.vector <- 1:4
mean.vector(my.vector)
my.vector <- rbind(1:4, 1:4)
rbind(1:4, 1:4)
mean.vector(my.vector)
mean.vector <- function(vec){
# if vec is a vector, returns its mean
#if(is.vector(vec)){
sum.vec <- sum(vec)
length.vec <- length(vec)
sum.vec / length.vec
#}else{ # if vec is not a vector print error message
#  print('Vec is not a vector')
# }
}
my.vector <- rbind(1:4, 1:4)
#my.vector <- 1:4
mean.vector(my.vector)
time.series.length <- 50
trend.1 <- 10 + seq(1:time.series.length) / time.series.length
trend.2 <- 8 + seq(1:time.series.length) / (time.series.length / 3)
plot(trend.1, trend.2)
time.series.1 <- trend.1 + rnorm(n = time.series.length, mean = 0, sd = .2)
time.series.2 <- trend.2 + rnorm(n = time.series.length, mean = 0, sd = .35)
plot(time.series.1, time.series.2)
cor.test(time.series.1, time.series.2)
lm.results <- lm(time.series.2 ~ time.series.1)
summary(lm.results)
curve(lm.results$coefficients[1] + lm.results$coefficients[2] * x,
lwd = 2, col = 'red', add = T)
curve(lm.results$coefficients[1] + lm.results$coefficients[2] * x ^2,
lwd = 2, col = 'red', add = T)
curve(lm.results$coefficients[1] + (lm.results$coefficients[2] * x) ^2,
lwd = 2, col = 'red', add = T)
curve(lm.results$coefficients[1] + (lm.results$coefficients[2] * x) ^2,
lwd = 2, col = 'blue', add = T)
salmon.data <- read.table('N:/0_r_training/2_data/salmonRaw.txt', header = TRUE)
dim(salmon.data)
head(salmon.data)
?by()
by(data = salmon.data,
INDICES = list(salmon.data$year),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".")
})
by(data = salmon.data,
INDICES = list(salmon.data$year),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = subSalmon$year[1])
})
X11(10, 10)
par(mfcol = c(5, 6))
by(data = salmon.data,
INDICES = list(salmon.data$year),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = subSalmon$year[1])
})
X11(10, 10)
par(mfcol = c(4, 6))
by(data = salmon.data,
INDICES = list(salmon.data$year),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = subSalmon$year[1])
})
X11(10, 10)
par(mfcol = c(7, 7))
by(data = salmon.data,
INDICES = list(salmon.data$year, salmon.data$sex),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = subSalmon$year[1])
})
X11(10, 10)
par(mfcol = c(7, 7), mar = c(3, 3, 2, 0.5)+0.1,
mgp = c(2, 0.8, 0))
by(data = salmon.data,
INDICES = list(salmon.data$year, salmon.data$sex),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = subSalmon$year[1])
})
X11(10, 10)
par(mfcol = c(7, 6), mar = c(3, 3, 2, 0.5)+0.1,
mgp = c(2, 0.8, 0))
by(data = salmon.data,
INDICES = list(salmon.data$year, salmon.data$sex),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = subSalmon$year[1])
})
head(salmon.data)
X11(10, 10)
par(mfrow = c(7, 6), mar = c(3, 3, 2, 0.5)+0.1,
mgp = c(2, 0.8, 0))
by(data = salmon.data,
INDICES = list(salmon.data$year, salmon.data$sex),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = paste(subSalmon$year[1], subSalmon$sex[1]))
})
X11(10, 10)
par(mfrow = c(4, 6), mar = c(3, 3, 2, 0.5)+0.1,
mgp = c(2, 0.8, 0))
by(data = salmon.data,
INDICES = list(salmon.data$year),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = subSalmon$year[1])
})
X11(10, 10)
par(mfrow = c(7, 6), mar = c(3, 3, 2, 0.5)+0.1,
mgp = c(2, 0.8, 0))
by(data = salmon.data,
INDICES = list(salmon.data$year, salmon.data$sex),
FUN = function(subSalmon){
plot(x = subSalmon$length,
y = subSalmon$weight,
col = "blue", pch = ".",
main = paste(subSalmon$year[1], c("F", "M")[subSalmon$sex[1]]))
})
dim(salmon.data)
ncol(salmon.data)
dim(salmon.data)[2]
dim(salmon.data)
for(c in 1:dim(salmon.data)[2]){
if(is.numeric(salmon.data[ , c])){
hist(salmon.data[ , c])
}
}
for(c in 1:dim(salmon.data)[2]){
if(is.numeric(salmon.data[ , c])){
hist(salmon.data[ , c])
}else{
print(paste('not numeric', colnames(salmon.data)[c]))
}
}
for(c in 1:dim(salmon.data)[2]){
if(is.numeric(salmon.data[ , c])|is.interger(salmon.data[ , c])){
hist(salmon.data[ , c])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[c]))
}
}
for(c in 1:dim(salmon.data)[2]){
if(is.numeric(salmon.data[ , c])|is.integer(salmon.data[ , c])){
hist(salmon.data[ , c])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[c]))
}
}
c <- 1
if(is.numeric(salmon.data[ , c])|is.integer(salmon.data[ , c])){
hist(salmon.data[ , c])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[c]))
}
hist(salmon.data[ , c])
for(c in 1:dim(salmon.data)[2]){
#c <- 1
test.hist < - is.numeric(salmon.data[ , c])|is.integer(salmon.data[ , c])
if(test.hist){
hist(salmon.data[ , c])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[c]))
}
}
for(c in 1:dim(salmon.data)[2]){
#c <- 1
test.hist < - is.numeric(salmon.data[ , c])|is.integer(salmon.data[ , c])
if(test.hist){
hist(salmon.data[ , c])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[c]))
}
}
test.hist
is.numeric(salmon.data[ , c])|is.integer(salmon.data[ , c])
for(c in 1:dim(salmon.data)[2]){
#c <- 1
test.hist < - is.numeric(salmon.data[ , c])|is.integer(salmon.data[ , c])
if(test.hist){
hist(salmon.data[ , c])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[c]))
}
}
for(c in 1:dim(salmon.data)[2]){
#c <- 1
test_hist < - is.numeric(salmon.data[ , c])|is.integer(salmon.data[ , c])
if(test_hist){
hist(salmon.data[ , c])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[c]))
}
}
for(cnum in 1:dim(salmon.data)[2]){
#c <- 1
test_hist < - is.numeric(salmon.data[ , cnum])|is.integer(salmon.data[ , cnum])
if(test_hist){
hist(salmon.data[ , cnum])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[cnum]))
}
}
is.numeric(salmon.data[ , cnum])
is.integer(salmon.data[ , cnum])
cnum
test_hist < - is.numeric(salmon.data[ , cnum])|is.integer(salmon.data[ , cnum])
for(cnum in 1:dim(salmon.data)[2]){
#c <- 1
test_hist <- is.numeric(salmon.data[ , cnum])|is.integer(salmon.data[ , cnum])
if(test_hist){
hist(salmon.data[ , cnum])
}else{
print(paste('not numeric or integer', colnames(salmon.data)[cnum]))
}
}
for(cnum in 1:dim(salmon.data)[2]){
#c <- 1
test_hist <- is.numeric(salmon.data[ , cnum])|is.integer(salmon.data[ , cnum])
if(test_hist){
hist(salmon.data[ , cnum], main = colnames(salmon.data)[cnum] )
}else{
print(paste('not numeric or integer', colnames(salmon.data)[cnum]))
}
}
